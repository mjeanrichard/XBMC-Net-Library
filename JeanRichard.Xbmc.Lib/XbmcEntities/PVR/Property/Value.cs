//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JeanRichard.Xbmc.Lib.XbmcEntities.PVR.Property {
    using System;
    using System.Runtime.Serialization;
    
    
    /// <jsonId>
    /// PVR.Property.Value
    /// </jsonId>
    /// <json>
    /// {
    ///  "id": "PVR.Property.Value",
    ///  "properties": {
    ///    "available": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "recording": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "scanning": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    }
    ///  },
    ///  "type": "object"
    ///}
    /// </json>
    public partial class Value : JeanRichard.Xbmc.Lib.JsonRpc.JsonRpcItem {
        
        private System.Nullable<bool> _available = false;
        
        private System.Nullable<bool> _recording = false;
        
        private System.Nullable<bool> _scanning = false;
        
partial void ParseExtension(Newtonsoft.Json.Linq.JToken json);
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="available")]
        public System.Nullable<bool> Available {
            get {
                return this._available;
            }
            set {
                this._available = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="recording")]
        public System.Nullable<bool> Recording {
            get {
                return this._recording;
            }
            set {
                this._recording = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="scanning")]
        public System.Nullable<bool> Scanning {
            get {
                return this._scanning;
            }
            set {
                this._scanning = value;
            }
        }
        
        protected override void Parse(Newtonsoft.Json.Linq.JToken json) {
            base.Parse(json);
            this.Available = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "available", false);
            this.Recording = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "recording", false);
            this.Scanning = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "scanning", false);
            this.ParseExtension(json);
        }
    }
}
