//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JeanRichard.Xbmc.Lib.XbmcEntities.Player.Property {
    using System;
    using System.Runtime.Serialization;
    
    
    /// <jsonId>
    /// Player.Property.Value
    /// </jsonId>
    /// <json>
    /// {
    ///  "id": "Player.Property.Value",
    ///  "properties": {
    ///    "audiostreams": {
    ///      "items": {
    ///        "$ref": "Player.Audio.Stream"
    ///      },
    ///      "type": "array"
    ///    },
    ///    "canchangespeed": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "canmove": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "canrepeat": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "canrotate": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "canseek": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "canshuffle": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "canzoom": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "currentaudiostream": {
    ///      "$ref": "Player.Audio.Stream.Extended"
    ///    },
    ///    "currentsubtitle": {
    ///      "$ref": "Player.Subtitle"
    ///    },
    ///    "live": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "partymode": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "percentage": {
    ///      "$ref": "Player.Position.Percentage",
    ///      "default": 0
    ///    },
    ///    "playlistid": {
    ///      "$ref": "Playlist.Id",
    ///      "default": -1
    ///    },
    ///    "position": {
    ///      "$ref": "Playlist.Position",
    ///      "default": -1
    ///    },
    ///    "repeat": {
    ///      "$ref": "Player.Repeat",
    ///      "default": "off"
    ///    },
    ///    "shuffled": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "speed": {
    ///      "default": 0,
    ///      "type": "integer"
    ///    },
    ///    "subtitleenabled": {
    ///      "default": false,
    ///      "type": "boolean"
    ///    },
    ///    "subtitles": {
    ///      "items": {
    ///        "$ref": "Player.Subtitle"
    ///      },
    ///      "type": "array"
    ///    },
    ///    "time": {
    ///      "$ref": "Global.Time"
    ///    },
    ///    "totaltime": {
    ///      "$ref": "Global.Time"
    ///    },
    ///    "type": {
    ///      "$ref": "Player.Type",
    ///      "default": "video"
    ///    }
    ///  },
    ///  "type": "object"
    ///}
    /// </json>
    public partial class PlayerProperties : JeanRichard.Xbmc.Lib.JsonRpc.JsonRpcItem {
        
        private Player.Audio.AudioStream[] _audioStreams;
        
        private System.Nullable<bool> _canChangespeed = false;
        
        private System.Nullable<bool> _canMove = false;
        
        private System.Nullable<bool> _canRepeat = false;
        
        private System.Nullable<bool> _canRotate = false;
        
        private System.Nullable<bool> _canSeek = false;
        
        private System.Nullable<bool> _canShuffle = false;
        
        private System.Nullable<bool> _canZoom = false;
        
        private Player.Audio.ExtendedAudioStream _currentAudioStream;
        
        private Player.Subtitle _currentSubtitle;
        
        private System.Nullable<bool> _live = false;
        
        private System.Nullable<bool> _partymode = false;
        
        private System.Nullable<decimal> _percentage = 0m;
        
        private System.Nullable<int> _playlistId = -1;
        
        private System.Nullable<int> _position = -1;
        
        private Player.Repeat _repeat;
        
        private System.Nullable<bool> _shuffled = false;
        
        private System.Nullable<int> _speed = 0;
        
        private System.Nullable<bool> _subtitleEnabled = false;
        
        private Player.Subtitle[] _subtitleS;
        
        private Global.Time _time;
        
        private Global.Time _totalTime;
        
        private Player.PlayerTypes _type;
        
partial void ParseExtension(Newtonsoft.Json.Linq.JToken json);
        
        [Newtonsoft.Json.JsonProperty(PropertyName="audiostreams")]
        public Player.Audio.AudioStream[] AudioStreams {
            get {
                return this._audioStreams;
            }
            set {
                this._audioStreams = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="canchangespeed")]
        public System.Nullable<bool> CanChangespeed {
            get {
                return this._canChangespeed;
            }
            set {
                this._canChangespeed = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="canmove")]
        public System.Nullable<bool> CanMove {
            get {
                return this._canMove;
            }
            set {
                this._canMove = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="canrepeat")]
        public System.Nullable<bool> CanRepeat {
            get {
                return this._canRepeat;
            }
            set {
                this._canRepeat = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="canrotate")]
        public System.Nullable<bool> CanRotate {
            get {
                return this._canRotate;
            }
            set {
                this._canRotate = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="canseek")]
        public System.Nullable<bool> CanSeek {
            get {
                return this._canSeek;
            }
            set {
                this._canSeek = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="canshuffle")]
        public System.Nullable<bool> CanShuffle {
            get {
                return this._canShuffle;
            }
            set {
                this._canShuffle = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="canzoom")]
        public System.Nullable<bool> CanZoom {
            get {
                return this._canZoom;
            }
            set {
                this._canZoom = value;
            }
        }
        
        [Newtonsoft.Json.JsonProperty(PropertyName="currentaudiostream")]
        public Player.Audio.ExtendedAudioStream CurrentAudioStream {
            get {
                return this._currentAudioStream;
            }
            set {
                this._currentAudioStream = value;
            }
        }
        
        [Newtonsoft.Json.JsonProperty(PropertyName="currentsubtitle")]
        public Player.Subtitle CurrentSubtitle {
            get {
                return this._currentSubtitle;
            }
            set {
                this._currentSubtitle = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="live")]
        public System.Nullable<bool> Live {
            get {
                return this._live;
            }
            set {
                this._live = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="partymode")]
        public System.Nullable<bool> Partymode {
            get {
                return this._partymode;
            }
            set {
                this._partymode = value;
            }
        }
        
        /// <remarks>Minimum: '0'  Maximum: '0'  Default: '0'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="percentage")]
        public System.Nullable<decimal> Percentage {
            get {
                return this._percentage;
            }
            set {
                this._percentage = value;
            }
        }
        
        /// <remarks>Minimum: '0'  Maximum: '0'  Default: '-1'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="playlistid")]
        public System.Nullable<int> PlaylistId {
            get {
                return this._playlistId;
            }
            set {
                this._playlistId = value;
            }
        }
        
        /// <remarks>Minimum: '0'  Default: '-1'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="position")]
        public System.Nullable<int> Position {
            get {
                return this._position;
            }
            set {
                this._position = value;
            }
        }
        
        [Newtonsoft.Json.JsonProperty(PropertyName="repeat")]
        public Player.Repeat Repeat {
            get {
                return this._repeat;
            }
            set {
                this._repeat = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="shuffled")]
        public System.Nullable<bool> Shuffled {
            get {
                return this._shuffled;
            }
            set {
                this._shuffled = value;
            }
        }
        
        /// <remarks>Default: '0'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="speed")]
        public System.Nullable<int> Speed {
            get {
                return this._speed;
            }
            set {
                this._speed = value;
            }
        }
        
        /// <remarks>Default: 'False'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="subtitleenabled")]
        public System.Nullable<bool> SubtitleEnabled {
            get {
                return this._subtitleEnabled;
            }
            set {
                this._subtitleEnabled = value;
            }
        }
        
        [Newtonsoft.Json.JsonProperty(PropertyName="subtitles")]
        public Player.Subtitle[] SubtitleS {
            get {
                return this._subtitleS;
            }
            set {
                this._subtitleS = value;
            }
        }
        
        [Newtonsoft.Json.JsonProperty(PropertyName="time")]
        public Global.Time Time {
            get {
                return this._time;
            }
            set {
                this._time = value;
            }
        }
        
        [Newtonsoft.Json.JsonProperty(PropertyName="totaltime")]
        public Global.Time TotalTime {
            get {
                return this._totalTime;
            }
            set {
                this._totalTime = value;
            }
        }
        
        [Newtonsoft.Json.JsonProperty(PropertyName="type")]
        public Player.PlayerTypes Type {
            get {
                return this._type;
            }
            set {
                this._type = value;
            }
        }
        
        protected override void Parse(Newtonsoft.Json.Linq.JToken json) {
            base.Parse(json);
            this.AudioStreams = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseJsonObjectArray<Player.Audio.AudioStream>(json, "audiostreams");
            this.CanChangespeed = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "canchangespeed", false);
            this.CanMove = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "canmove", false);
            this.CanRepeat = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "canrepeat", false);
            this.CanRotate = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "canrotate", false);
            this.CanSeek = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "canseek", false);
            this.CanShuffle = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "canshuffle", false);
            this.CanZoom = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "canzoom", false);
            this.CurrentAudioStream = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseJsonObject<Player.Audio.ExtendedAudioStream>(json, "currentaudiostream");
            this.CurrentSubtitle = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseJsonObject<Player.Subtitle>(json, "currentsubtitle");
            this.Live = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "live", false);
            this.Partymode = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "partymode", false);
            this.Percentage = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<decimal>>(json, "percentage", 0m);
            this.PlaylistId = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<int>>(json, "playlistid", -1);
            this.Position = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<int>>(json, "position", -1);
            this.Repeat = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseEnum<Player.Repeat>(json, "repeat", Player.Repeat.Off);
            this.Shuffled = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "shuffled", false);
            this.Speed = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<int>>(json, "speed", 0);
            this.SubtitleEnabled = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<bool>>(json, "subtitleenabled", false);
            this.SubtitleS = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseJsonObjectArray<Player.Subtitle>(json, "subtitles");
            this.Time = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseJsonObject<Global.Time>(json, "time");
            this.TotalTime = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseJsonObject<Global.Time>(json, "totaltime");
            this.Type = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseEnum<Player.PlayerTypes>(json, "type", Player.PlayerTypes.Video);
            this.ParseExtension(json);
        }
    }
}
