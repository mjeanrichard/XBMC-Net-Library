//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace JeanRichard.Xbmc.Lib.XbmcEntities.List.Item {
    using System;
    using System.Runtime.Serialization;
    
    
    /// <jsonId>
    /// List.Item.File
    /// </jsonId>
    /// <json>
    /// {
    ///  "extends": "List.Item.Base",
    ///  "id": "List.Item.File",
    ///  "properties": {
    ///    "file": {
    ///      "required": true,
    ///      "type": "string"
    ///    },
    ///    "filetype": {
    ///      "enums": [
    ///        "file",
    ///        "directory"
    ///      ],
    ///      "required": true,
    ///      "type": "string"
    ///    },
    ///    "lastmodified": {
    ///      "default": "",
    ///      "type": "string"
    ///    },
    ///    "mimetype": {
    ///      "default": "",
    ///      "type": "string"
    ///    },
    ///    "size": {
    ///      "default": 0,
    ///      "description": "Size of the file in kB (1000 Byte)",
    ///      "type": "integer"
    ///    }
    ///  }
    ///}
    /// </json>
    public partial class File : JeanRichard.Xbmc.Lib.XbmcEntities.List.Item.Base {
        
        private string _file;
        
        private List.Item.FileType _fileType;
        
        private string _lastModified = "";
        
        private string _mimetype = "";
        
        private System.Nullable<int> _size = 0;
        
partial void ParseExtension(Newtonsoft.Json.Linq.JToken json);
        
        [Newtonsoft.Json.JsonProperty(PropertyName="file")]
        public string File {
            get {
                return this._file;
            }
            set {
                this._file = value;
            }
        }
        
        [Newtonsoft.Json.JsonProperty(PropertyName="filetype")]
        public List.Item.FileType FileType {
            get {
                return this._fileType;
            }
            set {
                this._fileType = value;
            }
        }
        
        /// <remarks>Default: ''</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="lastmodified")]
        public string LastModified {
            get {
                return this._lastModified;
            }
            set {
                this._lastModified = value;
            }
        }
        
        /// <remarks>Default: ''</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="mimetype")]
        public string Mimetype {
            get {
                return this._mimetype;
            }
            set {
                this._mimetype = value;
            }
        }
        
        /// <summary>
        /// Size of the file in kB (1000 Byte)
        /// </summary>
        /// <remarks>Default: '0'</remarks>
        [Newtonsoft.Json.JsonProperty(PropertyName="size")]
        public System.Nullable<int> Size {
            get {
                return this._size;
            }
            set {
                this._size = value;
            }
        }
        
        protected override void Parse(Newtonsoft.Json.Linq.JToken json) {
            base.Parse(json);
            this.File = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<string>(json, "file");
            this.FileType = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseEnum<List.Item.FileType>(json, "filetype");
            this.LastModified = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<string>(json, "lastmodified", "");
            this.Mimetype = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<string>(json, "mimetype", "");
            this.Size = JeanRichard.Xbmc.Lib.JsonHelpers.JObjectExtensions.ParseSimpleValue<System.Nullable<int>>(json, "size", 0);
            this.ParseExtension(json);
        }
    }
}
